{% set this_page = "map" %}
{% extends "layout.html.j2" %}

{% block title %}Map | MeshInfo{% endblock %}
{% block head %}
  <script src="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.js"></script>
  <link href="https://cdn.jsdelivr.net/npm/openlayers@4.6.5/dist/ol.min.css" rel="stylesheet">
{% endblock %}

{% block content %}
  <div id="map" class="map" style="height: 100vh"></div>
  <div id="nodeDetail" class="ol-popup">
    <a href="#" id="popup-closer" class="ol-popup-closer"></a>
    <div id="popup-content"></div>
  </div>
  <div id="details" class="p-2" style="background-color: white;">
    <div>
      <div id="details-title"></div>
      <div id="details-subtitle"></div>
    </div>
    <div id="details-content">
    </div>
  </div>
  <div id="legend" class="p-2" style="background-color: #ffffff;">
    <div>LEGEND</div>
    <div>
      <div style="background-color: #66FF66; height: 4px; width: 25px; display: inline-flex;"></div> Heard A Neighbor
      <div</div>
    </div>
    <div>
      <div style="background-color: #6666FF; height: 4px; width: 25px; display: inline-flex;"></div> Heard By Neighbor
    </div>
    <div>
      <div style="background-color: #FF66FF; height: 4px; width: 25px; display: inline-flex;"></div> Both Heard Each Other
    </div>
  </div>
  <script type="module">
    async function reverseGeocode(lon, lat) {
      return fetch('https://nominatim.openstreetmap.org/reverse?format=json&lon=' + lon + '&lat=' + lat)
        .then(function(response) {
          return response.json();
        }).then(function(json) {
          console.log(json);
          return json;
        });
    }

    const default_position = {
      latitude: 38.5816,
      longitude: -121.4944,
    };
    var server_position = null;
    {% if 'latitude' in config['mesh'] and 'longitude'in config['mesh'] %}
      server_position = {
        latitude: {{ config['mesh']['latitude'] }},
        longitude: {{ config['mesh']['longitude'] }}
      };
    {% else %}
      server_position = default_position;
    {% endif %}

    var server_zoom = null;
    {% if 'zoom' in config['mesh'] %}
      server_zoom = {{ config['mesh']['zoom'] }};
    {% else %}
      server_zoom = 9.5;
    {% endif %}

    const map = new ol.Map({
      layers: [
        new ol.layer.Tile({
          source: new ol.source.OSM(),
        }),
      ],
      target: 'map',
      view: new ol.View({
        center: ol.proj.fromLonLat([server_position.longitude, server_position.latitude]),
        zoom: server_zoom,
      }),
    });

    var defaultStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 240, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 0
    });

    var offlineStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 0, 0.50)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 1
    });

    var onlineStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(50, 240, 50, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'white',
          width: 2
        })
      }),
      zIndex: 2
    });

    // Add helper functions for time formatting
    function formatTimestamp(timestamp) {
      return new Date(timestamp * 1000).toLocaleString();
    }

    function timeAgo(timestamp) {
      const seconds = Math.floor((Date.now() / 1000) - timestamp);
      if (seconds < 60) return seconds + "s ago";
      if (seconds < 3600) return Math.floor(seconds/60) + "m ago";
      if (seconds < 86400) return Math.floor(seconds/3600) + "h ago";
      return Math.floor(seconds/86400) + "d ago";
    }

    function calculateDistance(pos1, pos2) {
      if (!pos1 || !pos2) return null;
      return Math.sqrt(
        Math.pow(pos1[0] - pos2[0], 2) +
        Math.pow(pos1[1] - pos2[1], 2)
      ) * 111.32;
    }

    var nodes = {};
    var neighborLayers = [];
    {% for id, node in nodes.items() %}
      {% if node.position is defined and node.position and node.position.longitude_i and node.position.latitude_i %}
      nodes['{{ id }}'] = {
        id: '{{ id }}',
        short_name: '{{ node.short_name }}',
        long_name: '{{ node.long_name }}',
        last_seen: '{{ time_ago(node.ts_seen) }}',
        position: [{{ node.position.longitude_i / 10000000 }}, {{ node.position.latitude_i / 10000000 }}],
        online: {% if node.active %}true{% else %}false{% endif %},
        zero_hop_data: {{ zero_hop_data.get(id, {'heard': [], 'heard_by': []}) | tojson | safe }}
      };
      {% if node.neighbors %}
      nodes['{{ id }}'].neighbors = [
        {% for neighbor in node.neighbors %}
          {
            id: '{{ utils.convert_node_id_from_int_to_hex(neighbor.neighbor_id) }}',
            snr: '{{ neighbor.snr }}',
            distance: '{{ neighbor.distance }}',
          },
        {% endfor %}
      ];
      {% else %}
      nodes['{{ id }}'].neighbors = [];
      {% endif %}
      {% endif %}
    {% endfor %}

    const features = [];
    // Create a map to track positions
    const positionMap = new Map();
    
    Object.values(nodes).forEach(function(node) {
      if (node.position) {
        const posKey = node.position.join(',');
        const offset = positionMap.get(posKey) || 0;
        
        // Create slightly offset coordinates if this position was seen before
        let offsetCoords = [...node.position];
        if (offset > 0) {
          // Offset by approximately 100 meters
          offsetCoords[0] += 0.0001;
          offsetCoords[1] += 0.0001;
        }
        
        var feature = new ol.Feature({
          geometry: new ol.geom.Point(ol.proj.fromLonLat(offsetCoords)),
          node: node,
        });
        if (node.online) {
          feature.setStyle(onlineStyle);
        } else {
          feature.setStyle(offlineStyle);
        }
        features.push(feature);
        
        // Increment the count for this position
        positionMap.set(posKey, offset + 1);
      }
    });

    const layer = new ol.layer.Vector({
      style: defaultStyle,
      source: new ol.source.Vector({
        features: features
      })
    });
    map.addLayer(layer);

    var container = document.getElementById('nodeDetail');
    var content = document.getElementById('popup-content');
    var closer = document.getElementById('popup-closer');

    var nodeDetails = document.getElementById('details');
    var nodeTitle = document.getElementById('details-title');
    var nodeSubtitle = document.getElementById('details-subtitle');
    var nodeContent = document.getElementById('details-content');

    var overlay = new ol.Overlay({
      element: container,
      autoPan: true,
      autoPanAnimation: {
          duration: 250
      }
    });
    map.addOverlay(overlay);

    var selectedStyle = new ol.style.Style({
      image: new ol.style.Circle({
        radius: 6,
        fill: new ol.style.Fill({
          color: 'rgba(0, 0, 240, 1)'
        }),
        stroke: new ol.style.Stroke({
          color: 'orange',
          width: 2
        })
      })
    });
    var select = new ol.interaction.Select({
      condition: ol.events.condition.click,
      style: selectedStyle
    });
    map.addInteraction(select);

    closer.onclick = function() {
      select.getFeatures().clear();
      neighborLayers.map(function(layer) {
        map.removeLayer(layer);
      });
      neighborLayers = [];
      overlay.setPosition(undefined);
      closer.blur();
      nodeTitle.innerHTML = '';
      nodeSubtitle.innerHTML = '';
      nodeContent.innerHTML = '';
      $('#details').hide();
      return false;
    };

    map.on('singleclick', async function (event) {
      neighborLayers.map(function(layer) {
        map.removeLayer(layer);
      });
      neighborLayers = [];

      if (map.hasFeatureAtPixel(event.pixel) === true) {
        $('#details').show();
        var coordinate = event.coordinate;
        var feature = map.forEachFeatureAtPixel(event.pixel, function(feature) {
          return feature;
        });
        if (feature) {
          var properties = feature.getProperties();
          var node = properties.node;
          var address = await reverseGeocode(node.position[0], node.position[1]);
          var display_name = [address.address.town, address.address.city, address.address.county, address.address.state, address.address.country].filter(Boolean).join(', ');

          // Build the basic info panel
          var panel = '<div style="position: relative; margin-bottom: 12px">'
            + '<span title="' + (node.online ? 'Online' : 'Offline') + '" style="position: absolute; top: 0; right: 0; font-size: 1.5em">' 
            + (node.online ? 'ðŸŸ¢' : 'âš«') + '</span>'
            + '<div class="fw-bold">' + node.long_name + '</div>'
            + '<div class="text-muted small">' + node.id + '</div>'
            + '</div>'
            + '<div class="small">'
            + '<div class="mb-2"><i class="text-muted">Last seen:</i> ' + node.last_seen + '</div>'
            + '<div class="mb-2"><i class="text-muted">Position:</i> ' + node.position + '</div>'
            + '<div class="mb-2"><i class="text-muted">Location:</i> ' + display_name + '</div>'
            + '</div>';

          // Add the heard section
          panel += '<b>Heard (zero hop)</b><br/>';
          panel += "<table class='table table-striped table-bordered table-sm'>";
          panel += "<thead><tr><th>Node</th><th>Signal</th><th>Distance</th><th>Source</th></tr></thead>";
          panel += "<tbody>";

          // Add neighbor data
          if (node.neighbors) {
            node.neighbors.forEach(function(neighbor) {
              var nnode = nodes[neighbor.id];
              var distance = nnode ? calculateDistance(node.position, nnode.position) : null;
              panel += '<tr>';
              panel += '<td>' + (nnode ? '<a href="node_' + neighbor.id + '.html">' + nnode.short_name + '</a>' : '<span class="text-secondary">UNK</span>') + '</td>';
              panel += '<td>SNR: ' + neighbor.snr + '</td>';
              panel += '<td>' + (distance ? distance.toFixed(2) + ' km' : '') + '</td>';
              panel += '<td><span title="Neighbor data">N</span></td>';
              panel += '</tr>';
            });
          }

          // Add zero-hop message data
          if (node.zero_hop_data && node.zero_hop_data.heard) {
            node.zero_hop_data.heard.forEach(function(heard) {
              var nnode = nodes[heard.node_id];
              var distance = nnode ? calculateDistance(node.position, nnode.position) : null;
              panel += '<tr>';
              panel += '<td>' + (nnode ? '<a href="node_' + heard.node_id + '.html">' + nnode.short_name + '</a>' : '<span class="text-secondary">UNK</span>') + '</td>';
              panel += '<td>SNR: ' + heard.best_snr + ' max / ' + parseFloat(heard.avg_snr).toFixed(1) + ' avg</td>';
              panel += '<td>' + (distance ? distance.toFixed(2) + ' km' : '') + '</td>';
              panel += '<td><span title="Message data">M</span> (' + heard.count + ') <small title="Last heard ' + formatTimestamp(heard.last_rx_time) + '">' + timeAgo(heard.last_rx_time) + '</small></td>';
              panel += '</tr>';
            });
          }
          panel += "</tbody></table>";

          // Add the heard by section
          panel += '<br/><b>Heard By (zero hop)</b><br/>';
          panel += "<table class='table table-striped table-bordered table-sm'>";
          panel += "<thead><tr><th>Node</th><th>Signal</th><th>Distance</th><th>Source</th></tr></thead>";
          panel += "<tbody>";

          // Add nodes that heard this node (from neighbor data)
          Object.values(nodes).forEach(function(nnode) {
            if (nnode.neighbors && nnode.neighbors.some(n => n.id === node.id)) {
              var neighbor = nnode.neighbors.find(n => n.id === node.id);
              var distance = calculateDistance(node.position, nnode.position);
              panel += '<tr>';
              panel += '<td><a href="node_' + nnode.id + '.html">' + nnode.short_name + '</a></td>';
              panel += '<td>SNR: ' + neighbor.snr + '</td>';
              panel += '<td>' + (distance ? distance.toFixed(2) + ' km' : '') + '</td>';
              panel += '<td><span title="Neighbor data">N</span></td>';
              panel += '</tr>';
            }
          });

          // Add zero-hop heard-by data
          if (node.zero_hop_data && node.zero_hop_data.heard_by) {
            node.zero_hop_data.heard_by.forEach(function(heard) {
              var nnode = nodes[heard.node_id];
              var distance = nnode ? calculateDistance(node.position, nnode.position) : null;
              panel += '<tr>';
              panel += '<td>' + (nnode ? '<a href="node_' + heard.node_id + '.html">' + nnode.short_name + '</a>' : '<span class="text-secondary">UNK</span>') + '</td>';
              panel += '<td>SNR: ' + heard.best_snr + ' max / ' + parseFloat(heard.avg_snr).toFixed(1) + ' avg</td>';
              panel += '<td>' + (distance ? distance.toFixed(2) + ' km' : '') + '</td>';
              panel += '<td><span title="Message data">M</span> (' + heard.count + ') <small title="Last heard ' + formatTimestamp(heard.last_rx_time) + '">' + timeAgo(heard.last_rx_time) + '</small></td>';
              panel += '</tr>';
            });
          }
          panel += "</tbody></table>";

          // Add elsewhere section
          panel += '<br/><b>Elsewhere</b><br/>';
          var node_id = parseInt(node.id, 16);
          panel += '<a href="https://meshtastic.davekeogh.com/?node_id=' + node_id + '" target="_blank">PugetMesh Map</a><br/>';
          panel += '<a href="https://meshmap.net/#' + node_id + '" target="_blank">MeshMap</a><br/>';

          // Draw connection lines
          // Draw neighbor connections
          if (node.neighbors) {
            node.neighbors.forEach(function(neighbor) {
              var nnode = nodes[neighbor.id];
              if (!nnode || !nnode.position) return;
              
              var points = [node.position, nnode.position];
              for (var i = 0; i < points.length; i++) {
                points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
              }

              var featureLine = new ol.Feature({
                geometry: new ol.geom.LineString(points)
              });

              var vectorLine = new ol.source.Vector({});
              vectorLine.addFeature(featureLine);

              var lineStyle = new ol.style.Style({
                fill: new ol.style.Fill({ color: '#66FF66', weight: 8 }),
                stroke: new ol.style.Stroke({ color: '#66FF66', width: 4 })
              });

              var vectorLineLayer = new ol.layer.Vector({
                source: vectorLine,
                style: lineStyle
              });
              neighborLayers.push(vectorLineLayer);
              map.addLayer(vectorLineLayer);
            });
          }

          // Draw zero-hop connections
          if (node.zero_hop_data) {
            // Draw lines for heard nodes
            node.zero_hop_data.heard.forEach(function(heard) {
              var nnode = nodes[heard.node_id];
              if (!nnode || !nnode.position) return;
              
              var points = [node.position, nnode.position];
              for (var i = 0; i < points.length; i++) {
                points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
              }

              var featureLine = new ol.Feature({
                geometry: new ol.geom.LineString(points)
              });

              var vectorLine = new ol.source.Vector({});
              vectorLine.addFeature(featureLine);

              // Use purple if there's a bi-directional connection
              var isBidirectional = node.zero_hop_data.heard_by.some(h => h.node_id === heard.node_id);
              var lineStyle = new ol.style.Style({
                fill: new ol.style.Fill({ color: isBidirectional ? '#FF66FF' : '#66FF66', weight: 8 }),
                stroke: new ol.style.Stroke({ color: isBidirectional ? '#FF66FF' : '#66FF66', width: 4 })
              });

              var vectorLineLayer = new ol.layer.Vector({
                source: vectorLine,
                style: lineStyle
              });
              neighborLayers.push(vectorLineLayer);
              map.addLayer(vectorLineLayer);
            });

            // Draw lines for heard-by nodes (if not already drawn)
            node.zero_hop_data.heard_by.forEach(function(heard) {
              var nnode = nodes[heard.node_id];
              if (!nnode || !nnode.position) return;
              
              // Skip if we already drew a line for this connection
              if (node.zero_hop_data.heard.some(h => h.node_id === heard.node_id)) return;
              
              var points = [node.position, nnode.position];
              for (var i = 0; i < points.length; i++) {
                points[i] = ol.proj.transform(points[i], 'EPSG:4326', 'EPSG:3857');
              }

              var featureLine = new ol.Feature({
                geometry: new ol.geom.LineString(points)
              });

              var vectorLine = new ol.source.Vector({});
              vectorLine.addFeature(featureLine);

              var lineStyle = new ol.style.Style({
                fill: new ol.style.Fill({ color: '#6666FF', weight: 8 }),
                stroke: new ol.style.Stroke({ color: '#6666FF', width: 4 })
              });

              var vectorLineLayer = new ol.layer.Vector({
                source: vectorLine,
                style: lineStyle
              });
              neighborLayers.push(vectorLineLayer);
              map.addLayer(vectorLineLayer);
            });
          }

          // Update the display
          nodeContent.innerHTML = panel;
        } else {
          nodeTitle.innerHTML = 'Unknown';
          nodeSubtitle.innerHTML = 'UNK';
          nodeContent.innerHTML = '';
          $('#details').hide();
        }
      } else {
        nodeTitle.innerHTML = '';
        nodeSubtitle.innerHTML = '';
        nodeContent.innerHTML = '';
        closer.blur();
        $('#details').hide();
      }
    });
  </script>
  <style>
    #map {
      height: 100%;
      width: 100%;
    }
    #legend {
      position: absolute;
      bottom: 20px;
      right: 20px;
      z-index: 1000;
    }
    #details {
      position: absolute;
      top: 20px;
      right: 20px;
      z-index: 1000;
    }
    .ol-popup {
      position: absolute;
      background-color: white;
      box-shadow: 0 1px 4px rgba(0,0,0,0.2);
      padding: 15px;
      border-radius: 10px;
      border: 1px solid #cccccc;
      bottom: 12px;
      left: -50px;
      min-width: 280px;
    }
    .ol-popup:after, .ol-popup:before {
      top: 100%;
      border: solid transparent;
      content: " ";
      height: 0;
      width: 0;
      position: absolute;
      pointer-events: none;
    }
    .ol-popup:after {
      border-top-color: white;
      border-width: 10px;
      left: 48px;
      margin-left: -10px;
    }
    .ol-popup:before {
      border-top-color: #cccccc;
      border-width: 11px;
      left: 48px;
      margin-left: -11px;
    }
    .ol-popup-closer {
      text-decoration: none;
      position: absolute;
      top: 2px;
      right: 8px;
    }
    .ol-popup-closer:after {
      content: "x";
    }
  </style>
{% endblock %}
