<div class="d-flex justify-content-end mb-2 gap-3">
  <div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="showPosition">
    <label class="form-check-label" for="showPosition">Show Position</label>
  </div>
  <div class="form-check form-switch">
    <input class="form-check-input" type="checkbox" role="switch" id="showTelemetry">
    <label class="form-check-label" for="showTelemetry">Show Telemetry</label>
  </div>
</div>

<div class="table-responsive">
  <table class="table table-striped table-bordered table-sm node-table">
    <thead>
      <tr>
        <th colspan="2" scope="col">ID</th>
        <th colspan="2" scope="col">Name</th>
        <th scope="col">HW</th>
        <th scope="col">FW</th>
        <th scope="col">Role</th>
        <th colspan="3" scope="col" class="position-col">Last Position</th>
        <th colspan="4" scope="col" class="telemetry-col">Telemetry</th>
        <th scope="col">Seen</th>
        <th scope="col">Owner</th>
      </tr>
      <tr>
        <th scope="col">&nbsp;</th>
        <th scope="col">&nbsp;</th>
        <th scope="col">Short</th>
        <th scope="col">Long</th>
        <th scope="col">&nbsp;</th>
        <th scope="col">&nbsp;</th>
        <th scope="col">&nbsp;</th>
        <th scope="col" class="position-col">Altitude</th>
        <th scope="col" class="position-col">Latitude</th>
        <th scope="col" class="position-col">Longitude</th>
        <th scope="col" class="telemetry-col"><img src="images/icons/battery.svg" style="height: 20px;" alt="Battery" title="Battery"></th>
        <th scope="col" class="telemetry-col"><img src="images/icons/voltage.svg" style="height: 14px;" alt="Voltage" title="Voltage"></th>
        <th scope="col" class="telemetry-col"><img src="images/icons/up.svg" style="height: 14px;" alt="Air Util TX" title="Air Util TX"></th>
        <th scope="col" class="telemetry-col"><img src="images/icons/down.svg" style="height: 14px;" alt="Channel Util" title="Channel Util"></th>
        <th scope="col">Since</th>
        <th scope="col"></th>
      </tr>
    <tbody>
      {% for id, node in nodes.items()|sort(attribute='1.short_name') %}
      {% if node.active or show_inactive %}
      {% if not hw_model_filter or node.hw_model == hw_model_filter|int %}
      <tr style="{% if not node.active %}opacity: 0.5;{% endif %}">
        <td class="p-0" style="width:50px;">
          <img src="https://api.dicebear.com/9.x/bottts-neutral/svg?seed={{ id }}" alt="Avatar"
            style="height: 50px; width: 50px;">
        </td>
        <td scope="col">
          {% if id %}
          {% set id = id|replace('!', '') %}
          <a href='node_{{ id }}.html'>{{ id }}</a>
          {% else %}
          {{ id }}
          {% endif %}
        </td>
        <td scope="col">
          {% if id %}
          {% set id = id|replace('!', '') %}
          <a href='node_{{ id }}.html'>{{ node.short_name }}</a>
          {% else %}
          {{ node.short_name }}
          {% endif %}
        </td>
        <td scope="col">
          {{ node.long_name }}
        </td>
        <td scope="col" class="text-center">
          {% if node.hw_model is not none %}
            {% set hw_name = meshtastic_support.get_hardware_model_name(node.hw_model) %}
            {% if node.hw_model in meshtastic_support.HardwareModel._value2member_map_ %}
              {% set hw_model_enum = meshtastic_support.HardwareModel(node.hw_model) %}
              {% if hw_model_enum in meshtastic_support.HARDWARE_PHOTOS %}
                <img
                  src="images/hardware/{{ meshtastic_support.HARDWARE_PHOTOS[hw_model_enum] }}"
                  alt="{{ hw_name }}"
                  title="{{ hw_name }}" style="width: 50px;">
              {% else %}
                <!-- Debug: No photo found for {{ node.hw_model }} ({{ hw_model_enum.name }}) -->
              {% endif %}
            {% else %}
              <!-- Debug: Invalid hardware model: {{ node.hw_model }} -->
            {% endif %}
          {% endif %}
        </td>
        <td scope="col">
          {% if node.firmware_version %}
          {{ node.firmware_version }}
          {% endif %}
        </td>
        <td scope="col">
          {% if node.role is not none %}
            {% set badge_text, badge_style = get_role_badge(node.role) %}
            <span class="role-badge" style="{{ badge_style }}" title="{{ utils.get_role_name(node.role) }}">{{ badge_text }}</span>
          {% endif %}
        </td>
        {% if node.position %}
        <td scope="col" class="position-col">
          {% if node.position.altitude %}
          {{ node.position.altitude }} m
          {% endif %}
        </td>
        <td scope="col" class="position-col">{{ node.position.latitude or "" }}</td>
        <td scope="col" class="position-col">{{ node.position.longitude or "" }}</td>
        {% else %}
        <td scope="col" class="position-col"></td>
        <td scope="col" class="position-col"></td>
        <td scope="col" class="position-col"></td>
        {% endif %}
        {% if node.telemetry %}
          <td scope="col" class="telemetry-col">
            {% if node.telemetry and node.telemetry.battery_level is not none %}
              {{ node.telemetry.battery_level }}%
            {% endif %}
          </td>
          <td scope="col" class="telemetry-col">
            {% if node.telemetry and node.telemetry.voltage is not none %}
              {% if node.telemetry.voltage is number %}
                {{ node.telemetry.voltage|round(2) }}V
              {% else %}
                {{ node.telemetry.voltage }}
              {% endif %}
            {% endif %}
          </td>
          <td scope="col" class="telemetry-col">
            {% if node.telemetry and node.telemetry.air_util_tx is not none %}
              {% if node.telemetry.air_util_tx is number %}
                {{ node.telemetry.air_util_tx|round(1) }}%
              {% else %}
                {{ node.telemetry.air_util_tx }}
              {% endif %}
            {% endif %}
          </td>
          <td scope="col" class="telemetry-col">
            {% if node.telemetry and node.telemetry.channel_utilization is not none %}
              {% if node.telemetry.channel_utilization is number %}
                {{ node.telemetry.channel_utilization|round(1) }}%
              {% else %}
                {{ node.telemetry.channel_utilization }}
              {% endif %}
            {% endif %}
          </td>
          {% else %}
          <td scope="col" class="telemetry-col"></td>
          <td scope="col" class="telemetry-col"></td>
          <td scope="col" class="telemetry-col"></td>
          <td scope="col" class="telemetry-col"></td>
          {% endif %}
          <td scope="col">
            {% if node.channel is not none %}
            <span class="message-channel" style="background-color: {{ utils.get_channel_color(node.channel) }}; color: white; padding: 2px 6px; border-radius: 4px;" title="Channel {{ node.channel }} ({{ utils.get_channel_name(node.channel) }})">{{ utils.get_channel_name(node.channel, use_short_names=True) }}</span>
            {% endif %}
            {{ time_ago(node.ts_seen) }}
          </td>
          <td>
            {% if node.owner_username %}
            <a href="user_{{ node.owner_username }}.html">{{ node.owner_username }}</a>
            {% endif %}
          </td>
      </tr>
      {% endif %}
      {% endif %}
      {% endfor %}
    </tbody>
  </table>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    const positionSwitch = document.getElementById('showPosition');
    const telemetrySwitch = document.getElementById('showTelemetry');
    const positionCols = document.querySelectorAll('.position-col');
    const telemetryCols = document.querySelectorAll('.telemetry-col');

    function toggleColumns(columns, show) {
        columns.forEach(col => {
            col.style.display = show ? '' : 'none';
        });
    }

    // Load saved preferences from localStorage
    let showPosition = localStorage.getItem('showPosition');
    let showTelemetry = localStorage.getItem('showTelemetry');

    // Convert string 'true'/'false' to boolean, default to false if not set
    showPosition = showPosition === 'true';
    showTelemetry = showTelemetry === 'true';

    // Set initial checkbox states
    positionSwitch.checked = showPosition;
    telemetrySwitch.checked = showTelemetry;

    // Set initial column visibility
    toggleColumns(positionCols, showPosition);
    toggleColumns(telemetryCols, showTelemetry);

    // Event listeners for changes
    positionSwitch.addEventListener('change', function() {
        const isChecked = this.checked;
        toggleColumns(positionCols, isChecked);
        localStorage.setItem('showPosition', isChecked);
    });

    telemetrySwitch.addEventListener('change', function() {
        const isChecked = this.checked;
        toggleColumns(telemetryCols, isChecked);
        localStorage.setItem('showTelemetry', isChecked);
    });
});
</script>

<style>
.form-switch {
    padding-left: 2.5em;
}
.form-check-input {
    cursor: pointer;
}
.form-check-label {
    cursor: pointer;
    user-select: none;
}
</style>